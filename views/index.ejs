<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>撮影＋増殖ツール</title>
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
<script src="http://code.jquery.com/jquery-3.3.1.min.js"></script>
<script src="./js/opencv.js"></script>
<style>
  body {
    font-family: monospace;
    margin: 0;
    overflow: hidden;
    position: fixed;
    width: 100%;
    height: 100vh;
    -webkit-user-select: none;
    user-select: none;
  }
  .wrapper {
    position: absolute;
    height: 100%;
    height: 100vh;
    width: 100%;
    width: 100vw;
    margin: 0 auto;
  }
  #dispCanvas {
    position: absolute;
    top: 0;
    left: 0;
  }
  #inputVideo {
    position: absolute;
    top:0px;
    left: 0px;
    background-size: cover;
    min-height: 100%;
    min-width: 100%;
    min-height: 100vh;
    min-width: 100vw;
    visibility: hidden;
  }
  .scanPanel {
    position: absolute;
    width: 100vw;
    height: 90vh;
    z-index: 10;
  }
  .scanbutton {
    position: absolute;
    width: 200px;
    height:50px;
    left: 1%
  }
  #outCanvas {
    position: absolute;
    visibility: hidden;
  }
</style>
</head>
<body>
  <canvas id="dispCanvas"></canvas>
  <div class="wrapper">
    <video id="inputVideo" class="inputVideo" ></video>
  </div>
  <div class="scanPanel">
  <center>
    <input class="scanbutton" style="top:10%" type="button" value="アクション なし！" onclick="save('no');"></br>
    <input class="scanbutton" style="top:20%" type="button" value="ブルーム 　レディ" onclick="save('bloomready')"></br>
    <input class="scanbutton" style="top:30%" type="button" value="ブルーム 　ゴー！" onclick="save('bloom');"></br>
    <input class="scanbutton" style="top:40%" type="button" value="エアタップ レディ" onclick="save('airtapready');"></br>
    <input class="scanbutton" style="top:50%" type="button" value="エアタップ ゴー！" onclick="save('airtap');"></br>
  </center>
  </div>
  <canvas id="outCanvas"></canvas>
</body>
<script>
  // getUserMediaについてブラウザ間の挙動の違いを吸収
  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia;
  window.URL = window.URL || window.webkitURL;
  
  // 各種変数及びDOM
  let inputVideo = document.getElementById("inputVideo");
  let dispCanvas = document.getElementById("dispCanvas");
  let dispCtx;
  let grayCanvas = document.createElement("canvas");
  let grayCtx;
  let resizeCanvas = document.createElement("canvas");
  let resizeCtx;
  let outCanvas = document.getElementById("outCanvas");
  let outCtx;
  let streaming = false;

  const IMG_WIDTH = 64;
  const MARGIN_RATE = 0.8;
  let img_scale = 0;
  let v_w;
  let v_h;
  let v_top;
  let v_left;

  let start_w = 0;
  let start_h = 0;

  let imgLabel;

  // ビデオストリームの取得
  navigator.mediaDevices.getUserMedia({video: {facingMode: "environment"}, audio: false})
  .then(function(stream) {
    streaming = true;
    inputVideo.src = window.URL.createObjectURL(stream);
    inputVideo.onloadedmetadata = function(e) {
      init();

      // 最大30fpsでキャンバスへ描画
      setInterval(function() {
        if (streaming) {
          dispCtx.drawImage(inputVideo, v_left, v_top, v_w, v_h, 0, 0, dispCanvas.width, dispCanvas.height);
          dispCtx.strokeStyle="#FF0000";
          dispCtx.strokeRect(start_w-1, start_h-1, img_scale+2, img_scale+2);
        }
      }, 1000/30);
    }
  });

  function init(e) {
    inputVideo.play();
    onWindowResize();
  }

  // Utility：日付関数にYYYYMMDDHHMMSSsss形式で文字列を出力する関数Prototypeを追加。
  Date.prototype.toLocaleString = function()
  {
    return [
      this.getFullYear(),
      ("0" + (this.getMonth() + 1)).slice(-2),
      ("0" + this.getDate()).slice(-2)
      ].join('') 
      + '' +
      [
      ('0' + this.getHours().toString()).slice(-2),
      ('0' + String(this.getMinutes())).slice(-2),
      ('0' + this.getSeconds()).slice(-2)
      ].join('')
      + '' +
      ('00' + this.getMilliseconds()).slice(-3)
      ;
  }

  // 画面クリック時にキャンバス画像を自サーバへPOSTする（仮
  // 今後は各挙動ごとにファイル名？などを変更しつつ、増殖させつつPOSTする。
  function save(label) {
    if (!streaming) {
      return;
    }
    imgLabel = label;
    
    let rRad = 5;
    let tPx = 20;
    let radList = [rRad*-2, rRad*-1, 0, rRad, rRad*2];
    let pxList = [tPx*-1, 0, tPx]

    grayCtx.drawImage(inputVideo, v_left, v_top, v_w, v_h, 0, 0, grayCanvas.width, grayCanvas.height);
    let src = cv.imread(grayCanvas);
    let dst = new cv.Mat();
    cv.cvtColor(src, dst, cv.COLOR_RGBA2GRAY, 0);
    cv.imshow(grayCanvas, dst);
    
    for (px_w_idx in pxList) {
      for (px_h_idx in pxList) {
        for (rad_idx in radList) {
          rotateAndSend(radList[rad_idx], pxList[px_w_idx], pxList[px_h_idx]);
        }
      }
    }

    imgLabel = "";
  };

  // 画像回転＆送信
  function rotateAndSend(rad, px_w, px_h) {
    // 状態保持
    resizeCtx.save();
    outCtx.save();
    console.log(`rad: ${rad}, px_w: ${px_w}, px_h: ${px_h}`);

    // 画像回転
    resizeCtx.translate(resizeCanvas.width/2|0, resizeCanvas.height/2|0);
    resizeCtx.rotate((rad * Math.PI)/180);
    resizeCtx.translate(-resizeCanvas.width/2|0, -resizeCanvas.height/2|0);
    resizeCtx.drawImage(grayCanvas, px_w, px_h, grayCanvas.width + px_w, grayCanvas.height + px_h, 0, 0, resizeCanvas.width, resizeCanvas.height);

    // 画像生成→画像送信
    outCtx.drawImage(resizeCanvas, start_w, start_h, img_scale, img_scale, 0, 0, outCanvas.width, outCanvas.height);
    imgsend(outCanvas.toDataURL("image/png"));

    // 左右反転画像生成
    resizeCtx.transform(-1, 0, 0, 1, resizeCanvas.width, 0);
    resizeCtx.drawImage(grayCanvas, px_w, px_h, grayCanvas.width + px_w, grayCanvas.height + px_h, 0, 0, resizeCanvas.width, resizeCanvas.height);

    // 画像生成→画像送信
    outCtx.drawImage(resizeCanvas, start_w, start_h, img_scale, img_scale, 0, 0, outCanvas.width, outCanvas.height);
    imgsend(outCanvas.toDataURL("image/png"));

    // 状態戻し
    resizeCtx.restore();
    outCtx.restore();
 
  }

  function onWindowResize () {
    console.log('setRenderer size', window.innerWidth, window.innerHeight);
    let w_aspect = window.innerWidth / window.innerHeight;
    let v_aspect = inputVideo.videoWidth / inputVideo.videoHeight;
    if (w_aspect > v_aspect) {
      // 画面側の方が、横幅の割合が広い → ビデオの横幅に対して縦幅を調整する。
      v_w = inputVideo.videoWidth;
      v_h = v_w / w_aspect | 0;
      v_top = (inputVideo.videoHeight - v_h) / 2 | 0;
      v_left = 0;
    } else {
      v_h = inputVideo.videoHeight;
      v_w = v_h * w_aspect | 0;
      v_top = 0;
      v_left = (inputVideo.videoWidth - v_w) / 2 | 0;
    }
    console.log(`(${v_top}, ${v_left}, ${v_w}, ${v_h})`);
    
    dispCanvas.width = window.innerWidth
    dispCanvas.height = window.innerHeight;
    dispCtx = dispCanvas.getContext('2d');

    grayCanvas.width = dispCanvas.width;
    grayCanvas.height = dispCanvas.height;
    grayCtx = grayCanvas.getContext('2d');
    resizeCanvas.width = dispCanvas.width;
    resizeCanvas.height = dispCanvas.height;
    resizeCtx = resizeCanvas.getContext('2d');
    outCanvas.width = IMG_WIDTH;
    outCanvas.height = IMG_WIDTH;
    outCtx = outCanvas.getContext('2d');

    img_scale = dispCanvas.width > dispCanvas.height
      ? dispCanvas.height * MARGIN_RATE 
      : dispCanvas.width * MARGIN_RATE;
    start_w = (dispCanvas.width - img_scale)/2|0;
    start_h = (dispCanvas.height - img_scale)/2|0;
  }

  window.addEventListener('resize', onWindowResize, false);


  // 送信AJAX
  function imgsend(img) {
    $.ajax({
      type: "POST",
      url: "/api/upimage",
      data: {
        "image": img.replace(/^.*,/, ''),
        "filename": (new Date()).toLocaleString(),
        "label": imgLabel
      },
      success: function(data) {
        // console.log(data);
      }
    });
  }

  // 日付デバッグ用
  d = new Date('2018', '01', '02', '03', '04', '05', '006');
  console.log(d.toLocaleString());

</script>
</html>
